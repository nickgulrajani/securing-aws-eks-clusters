name: eks-security-dryrun

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  dryrun:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Sanity: block stray scaffold artifacts that break parsers
      - name: Sanity - no stray scaffold artifacts
        run: |
          set -euo pipefail
          # 1) Literal "$@" lines
          if grep -R -n -E '^[[:space:]]*"\$@"[[:space:]]*$' .github terraform k8s tfvars; then
            echo "::error::Found stray '\"$@\"' line. Clean files and retry."
            exit 1
          fi
          # 2) Bare double-quote lines
          if grep -R -n -E '^[[:space:]]*"[[:space:]]*$' .github terraform k8s tfvars; then
            echo "::error::Found stray bare '\"' line. Clean files and retry."
            exit 1
          fi
          echo "OK: no stray scaffold artifacts."

      # Ensure tfvars exists so plan doesn't fail if file is missing
      - name: Ensure tfvars/eks.tfvars exists (default for dry run)
        run: |
          set -euo pipefail
          mkdir -p tfvars
          if [ ! -f tfvars/eks.tfvars ]; then
            cat > tfvars/eks.tfvars <<'EOF'
project           = "eks-security"
environment       = "dryrun"
aws_region        = "us-east-1"
name_prefix       = "ekssec"
enable_eks        = true
private_subnet_ids = ["subnet-aaaa1111", "subnet-bbbb2222"]
cluster_role_arn   = "arn:aws:iam::111111111111:role/placeholder-eks-role"
EOF
            echo "Created default tfvars/eks.tfvars for dry run."
          fi

      - name: Ensure jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt and validate
        run: |
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform fmt -recursive
          terraform -chdir=terraform validate

      - name: Terraform plan (no apply, no costs)
        env:
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_REGION: us-east-1
        run: |
          set -euo pipefail
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform plan -refresh=false \
            -var-file=../tfvars/eks.tfvars \
            -out=tfplan.binary
          terraform -chdir=terraform show -json tfplan.binary > tfplan.json
          terraform -chdir=terraform show tfplan.binary | sed -n '1,160p'

      # === Security gates derived from Terraform plan (zero cost) ===

      - name: Gate - EKS must use KMS for secrets
        run: |
          set -euo pipefail
          HAS_ENC=$(jq -r '
            any(.resource_changes[]?;
                .type=="aws_eks_cluster" and
                (.change.after.encryption_config // [] | length) > 0
            )' tfplan.json)
          if [ "$HAS_ENC" != "true" ]; then
            echo "::error::EKS cluster lacks encryption_config (KMS)."
            exit 1
          fi
          echo "OK: EKS encryption_config present."

      - name: Gate - EKS endpoint must be private
        run: |
          set -euo pipefail
          PRIV=$(jq -r '
            any(.resource_changes[]?;
                .type=="aws_eks_cluster" and
                ((.change.after.vpc_config | if type=="array" then .[0] else . end).endpoint_public_access == false)
            )' tfplan.json)
          if [ "$PRIV" != "true" ]; then
            echo "::error::EKS endpoint_public_access must be false."
            exit 1
          fi
          echo "OK: EKS private endpoint enforced."

      - name: Gate - GuardDuty detector must be created
        run: |
          set -euo pipefail
          HAS_GD=$(jq -r '
            any(.resource_changes[]?; .type=="aws_guardduty_detector" and (.change.actions | index("create")))
          ' tfplan.json)
          if [ "$HAS_GD" != "true" ]; then
            echo "::error::GuardDuty detector not present in plan."
            exit 1
          fi
          echo "OK: GuardDuty detector present."

      - name: Gate - required tags on taggable resources
        run: |
          set -euo pipefail
          REQUIRED='["Project","Environment","Owner","CostCenter"]'
          MISSING=$(
            jq -r --argjson req "$REQUIRED" '
              def ensure_obj(x): if (x|type)=="object" then x else {} end;
              [
                .resource_changes[]?
                | select(.change.actions | index("create"))
                | . as $rc
                | (ensure_obj($rc.change.after)) as $after
                | ($after.tags_all // $after.tags // null) as $tags
                | select($tags != null)
                | {addr: $rc.address, type: $rc.type,
                   missing: [$req[] | select( ($tags[.] // null) == null )]}
                | select(.missing | length > 0)
                | "\(.addr) (\(.type)) missing: \(.missing|join(", "))"
              ] | .[]
            ' tfplan.json
          )
          if [ -n "$MISSING" ]; then
            echo "::error::Missing required tags:"; echo "$MISSING"
            exit 1
          fi
          echo "OK: required tags present on taggable resources."

      # === Kubernetes policy checks (no cluster required) ===

      - name: Conftest (OPA) - validate Kubernetes manifests
        run: |
          set -euo pipefail
          test -d k8s/manifests
          test -d k8s/policy
          docker run --rm -v "$PWD/k8s:/project" openpolicyagent/conftest:latest \
            test /project/manifests --policy /project/policy
          echo "OK: OPA policy checks passed."

      - name: Quick static checks for required objects
        run: |
          set -euo pipefail
          grep -q 'pod-security.kubernetes.io/enforce: "restricted"' k8s/manifests/psa-namespaces.yaml
          grep -q "^kind: NetworkPolicy" k8s/manifests/networkpolicies.yaml
          grep -q "^kind: ClusterRole" k8s/manifests/rbac.yaml
          echo "OK: Required K8s objects present."

      # === Artifacts ===
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eks-security-dryrun-artifacts
          path: |
            terraform/tfplan.binary
            tfplan.json
            k8s/manifests
            k8s/policy
          if-no-files-found: error
